{"ast":null,"code":"import E from \"wangeditor\";\nimport hljs from \"highlight.js\";\nexport default {\n  name: \"NewBlog\",\n  data() {\n    return {\n      form: {},\n      user: JSON.parse(localStorage.getItem('xm-user') || '{}'),\n      rules: {},\n      tagsArr: [],\n      categoryList: [],\n      editor: null,\n      blogId: this.$route.query.blogId\n    };\n  },\n  mounted() {\n    this.$request.get('/category/selectAll').then(res => {\n      this.categoryList = res.data || [];\n    });\n    this.$request.get('/blog/selectById/' + this.blogId).then(res => {\n      this.form = res.data || {};\n      if (this.form.id) {\n        this.tagsArr = JSON.parse(this.form.tags || '[]');\n        setTimeout(() => {\n          this.editor.txt.html(this.form.content);\n        }, 0);\n      }\n    });\n    this.setRichText();\n  },\n  methods: {\n    save() {\n      // 保存按钮触发的逻辑  它会触发新增或者更新\n      this.$refs.formRef.validate(valid => {\n        if (valid) {\n          this.form.tags = JSON.stringify(this.tagsArr); // 把json数组转换成json字符串存到数据库\n          this.form.content = this.editor.txt.html();\n          this.$request({\n            url: this.form.id ? '/blog/update' : '/blog/add',\n            method: this.form.id ? 'PUT' : 'POST',\n            data: this.form\n          }).then(res => {\n            if (res.code === '200') {\n              // 表示成功保存\n              this.$message.success('保存成功');\n            } else {\n              this.$message.error(res.msg); // 弹出错误的信息\n            }\n          });\n        }\n      });\n    },\n\n    handleCoverSuccess(res) {\n      this.form.cover = res.data;\n    },\n    setRichText() {\n      this.$nextTick(() => {\n        this.editor = new E(`#editor`);\n        this.editor.highlight = hljs;\n        this.editor.config.uploadImgServer = this.$baseUrl + '/files/editor/upload';\n        this.editor.config.uploadFileName = 'file';\n        this.editor.config.uploadImgHeaders = {\n          token: this.user.token\n        };\n        this.editor.config.uploadImgParams = {\n          type: 'img'\n        };\n        this.editor.config.zIndex = 0;\n        this.editor.create(); // 创建\n      });\n    }\n  }\n};","map":{"version":3,"names":["E","hljs","name","data","form","user","JSON","parse","localStorage","getItem","rules","tagsArr","categoryList","editor","blogId","$route","query","mounted","$request","get","then","res","id","tags","setTimeout","txt","html","content","setRichText","methods","save","$refs","formRef","validate","valid","stringify","url","method","code","$message","success","error","msg","handleCoverSuccess","cover","$nextTick","highlight","config","uploadImgServer","$baseUrl","uploadFileName","uploadImgHeaders","token","uploadImgParams","type","zIndex","create"],"sources":["src/views/front/NewBlog.vue"],"sourcesContent":["<template>\r\n  <div style=\"width: 50%; margin: 5px auto\">\r\n    <div class=\"card\" style=\"margin-bottom: 100px\">\r\n      <div style=\"font-weight: bold; font-size: 24px; margin-bottom: 50px\">发表新博客/编辑博客</div>\r\n      <el-form :model=\"form\" label-width=\"100px\" style=\"padding-right: 50px\" :rules=\"rules\" ref=\"formRef\">\r\n        <el-form-item label=\"标题\" prop=\"title\">\r\n          <el-input v-model=\"form.title\" placeholder=\"标题\"></el-input>\r\n        </el-form-item>\r\n        <el-form-item label=\"简介\" prop=\"descr\">\r\n          <el-input type=\"textarea\" v-model=\"form.descr\" placeholder=\"简介\"></el-input>\r\n        </el-form-item>\r\n        <el-form-item label=\"封面\" prop=\"cover\">\r\n          <el-upload\r\n              :action=\"$baseUrl + '/files/upload'\"\r\n              :headers=\"{ token: user.token }\"\r\n              list-type=\"picture\"\r\n              :on-success=\"handleCoverSuccess\"\r\n          >\r\n            <el-button type=\"primary\">上传封面</el-button>\r\n          </el-upload>\r\n        </el-form-item>\r\n        <el-form-item label=\"分类\" prop=\"categoryId\">\r\n          <el-select v-model=\"form.categoryId\" style=\"width: 100%\">\r\n            <el-option v-for=\"item in categoryList\" :key=\"item.id\" :value=\"item.id\" :label=\"item.name\"></el-option>\r\n          </el-select>\r\n        </el-form-item>\r\n        <el-form-item label=\"标签\" prop=\"tags\">\r\n          <el-select v-model=\"tagsArr\" multiple filterable allow-create default-first-option style=\"width: 100%\">\r\n            <el-option value=\"后端\"></el-option>\r\n            <el-option value=\"Java\"></el-option>\r\n            <el-option value=\"面试\"></el-option>\r\n            <el-option value=\"Vue\"></el-option>\r\n            <el-option value=\"前端\"></el-option>\r\n            <el-option value=\"大数据\"></el-option>\r\n            <el-option value=\"算法\"></el-option>\r\n            <el-option value=\"程序员\"></el-option>\r\n            <el-option value=\"小白\"></el-option>\r\n          </el-select>\r\n        </el-form-item>\r\n        <el-form-item label=\"内容\" prop=\"content\">\r\n          <div id=\"editor\"></div>\r\n        </el-form-item>\r\n      </el-form>\r\n      <div style=\"text-align: center\"><el-button type=\"primary\" size=\"medium\" style=\"width: 100px\" @click=\"save\">保 存</el-button></div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport E from \"wangeditor\";\r\nimport hljs from \"highlight.js\";\r\n\r\nexport default {\r\n  name: \"NewBlog\",\r\n  data() {\r\n    return {\r\n      form: {},\r\n      user: JSON.parse(localStorage.getItem('xm-user') || '{}'),\r\n      rules: {},\r\n      tagsArr: [],\r\n      categoryList: [],\r\n      editor: null,\r\n      blogId: this.$route.query.blogId\r\n    }\r\n  },\r\n  mounted() {\r\n    this.$request.get('/category/selectAll').then(res => {\r\n      this.categoryList = res.data || []\r\n    })\r\n\r\n    this.$request.get('/blog/selectById/' + this.blogId).then(res => {\r\n      this.form = res.data || {}\r\n      if (this.form.id) {\r\n        this.tagsArr = JSON.parse(this.form.tags || '[]')\r\n        setTimeout(() => {\r\n          this.editor.txt.html(this.form.content)\r\n        }, 0)\r\n      }\r\n    })\r\n\r\n    this.setRichText()\r\n  },\r\n  methods: {\r\n    save() {   // 保存按钮触发的逻辑  它会触发新增或者更新\r\n      this.$refs.formRef.validate((valid) => {\r\n        if (valid) {\r\n          this.form.tags = JSON.stringify(this.tagsArr)  // 把json数组转换成json字符串存到数据库\r\n          this.form.content = this.editor.txt.html()\r\n          this.$request({\r\n            url: this.form.id ? '/blog/update' : '/blog/add',\r\n            method: this.form.id ? 'PUT' : 'POST',\r\n            data: this.form\r\n          }).then(res => {\r\n            if (res.code === '200') {  // 表示成功保存\r\n              this.$message.success('保存成功')\r\n            } else {\r\n              this.$message.error(res.msg)  // 弹出错误的信息\r\n            }\r\n          })\r\n        }\r\n      })\r\n    },\r\n    handleCoverSuccess(res) {\r\n      this.form.cover = res.data\r\n    },\r\n    setRichText() {\r\n      this.$nextTick(() => {\r\n        this.editor = new E(`#editor`)\r\n        this.editor.highlight = hljs\r\n        this.editor.config.uploadImgServer = this.$baseUrl + '/files/editor/upload'\r\n        this.editor.config.uploadFileName = 'file'\r\n        this.editor.config.uploadImgHeaders = {\r\n          token: this.user.token\r\n        }\r\n        this.editor.config.uploadImgParams = {\r\n          type: 'img',\r\n        }\r\n        this.editor.config.zIndex = 0\r\n        this.editor.create()  // 创建\r\n      })\r\n    },\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n\r\n</style>"],"mappings":"AAiDA,OAAAA,CAAA;AACA,OAAAC,IAAA;AAEA;EACAC,IAAA;EACAC,KAAA;IACA;MACAC,IAAA;MACAC,IAAA,EAAAC,IAAA,CAAAC,KAAA,CAAAC,YAAA,CAAAC,OAAA;MACAC,KAAA;MACAC,OAAA;MACAC,YAAA;MACAC,MAAA;MACAC,MAAA,OAAAC,MAAA,CAAAC,KAAA,CAAAF;IACA;EACA;EACAG,QAAA;IACA,KAAAC,QAAA,CAAAC,GAAA,wBAAAC,IAAA,CAAAC,GAAA;MACA,KAAAT,YAAA,GAAAS,GAAA,CAAAlB,IAAA;IACA;IAEA,KAAAe,QAAA,CAAAC,GAAA,4BAAAL,MAAA,EAAAM,IAAA,CAAAC,GAAA;MACA,KAAAjB,IAAA,GAAAiB,GAAA,CAAAlB,IAAA;MACA,SAAAC,IAAA,CAAAkB,EAAA;QACA,KAAAX,OAAA,GAAAL,IAAA,CAAAC,KAAA,MAAAH,IAAA,CAAAmB,IAAA;QACAC,UAAA;UACA,KAAAX,MAAA,CAAAY,GAAA,CAAAC,IAAA,MAAAtB,IAAA,CAAAuB,OAAA;QACA;MACA;IACA;IAEA,KAAAC,WAAA;EACA;EACAC,OAAA;IACAC,KAAA;MAAA;MACA,KAAAC,KAAA,CAAAC,OAAA,CAAAC,QAAA,CAAAC,KAAA;QACA,IAAAA,KAAA;UACA,KAAA9B,IAAA,CAAAmB,IAAA,GAAAjB,IAAA,CAAA6B,SAAA,MAAAxB,OAAA;UACA,KAAAP,IAAA,CAAAuB,OAAA,QAAAd,MAAA,CAAAY,GAAA,CAAAC,IAAA;UACA,KAAAR,QAAA;YACAkB,GAAA,OAAAhC,IAAA,CAAAkB,EAAA;YACAe,MAAA,OAAAjC,IAAA,CAAAkB,EAAA;YACAnB,IAAA,OAAAC;UACA,GAAAgB,IAAA,CAAAC,GAAA;YACA,IAAAA,GAAA,CAAAiB,IAAA;cAAA;cACA,KAAAC,QAAA,CAAAC,OAAA;YACA;cACA,KAAAD,QAAA,CAAAE,KAAA,CAAApB,GAAA,CAAAqB,GAAA;YACA;UACA;QACA;MACA;IACA;;IACAC,mBAAAtB,GAAA;MACA,KAAAjB,IAAA,CAAAwC,KAAA,GAAAvB,GAAA,CAAAlB,IAAA;IACA;IACAyB,YAAA;MACA,KAAAiB,SAAA;QACA,KAAAhC,MAAA,OAAAb,CAAA;QACA,KAAAa,MAAA,CAAAiC,SAAA,GAAA7C,IAAA;QACA,KAAAY,MAAA,CAAAkC,MAAA,CAAAC,eAAA,QAAAC,QAAA;QACA,KAAApC,MAAA,CAAAkC,MAAA,CAAAG,cAAA;QACA,KAAArC,MAAA,CAAAkC,MAAA,CAAAI,gBAAA;UACAC,KAAA,OAAA/C,IAAA,CAAA+C;QACA;QACA,KAAAvC,MAAA,CAAAkC,MAAA,CAAAM,eAAA;UACAC,IAAA;QACA;QACA,KAAAzC,MAAA,CAAAkC,MAAA,CAAAQ,MAAA;QACA,KAAA1C,MAAA,CAAA2C,MAAA;MACA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}